// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from "@hey-api/client-fetch";
import type {
  AuthSignupData,
  AuthSignupResponse,
  AuthSignupError,
  AuthSigninData,
  AuthSigninResponse,
  AuthSigninError,
  AuthRefreshTokenData,
  AuthRefreshTokenResponse,
  AuthSignoutData,
  AuthSignoutResponse,
  AuthSignoutError,
  AuthGetCurrentUserData,
  AuthGetCurrentUserResponse,
  RootData,
  RootResponse,
  RootError,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Signup
 */
export const authSignup = <ThrowOnError extends boolean = false>(options: Options<AuthSignupData, ThrowOnError>) => {
  return (options?.client ?? client).post<AuthSignupResponse, AuthSignupError, ThrowOnError>({
    url: "/auth/signup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Signin
 */
export const authSignin = <ThrowOnError extends boolean = false>(options: Options<AuthSigninData, ThrowOnError>) => {
  return (options?.client ?? client).post<AuthSigninResponse, AuthSigninError, ThrowOnError>({
    url: "/auth/signin",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Refresh Token
 */
export const authRefreshToken = <ThrowOnError extends boolean = false>(
  options?: Options<AuthRefreshTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AuthRefreshTokenResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/refresh-token",
    ...options,
  });
};

/**
 * Signout
 */
export const authSignout = <ThrowOnError extends boolean = false>(options: Options<AuthSignoutData, ThrowOnError>) => {
  return (options?.client ?? client).post<AuthSignoutResponse, AuthSignoutError, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/signout",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Current User
 */
export const authGetCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<AuthGetCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AuthGetCurrentUserResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/me",
    ...options,
  });
};

/**
 * Root
 */
export const root = <ThrowOnError extends boolean = false>(options: Options<RootData, ThrowOnError>) => {
  return (options?.client ?? client).get<RootResponse, RootError, ThrowOnError>({
    url: "/",
    ...options,
  });
};
