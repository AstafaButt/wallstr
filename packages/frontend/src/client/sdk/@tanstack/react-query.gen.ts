// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-fetch";
import { queryOptions, type UseMutationOptions, type DefaultError } from "@tanstack/react-query";
import type {
  AuthSignupData,
  AuthSignupError,
  AuthSignupResponse,
  AuthSigninData,
  AuthSigninError,
  AuthSigninResponse,
  AuthRefreshTokenData,
  AuthRefreshTokenResponse,
  AuthSignoutData,
  AuthSignoutError,
  AuthSignoutResponse,
  AuthGetCurrentUserData,
  RootData,
} from "../types.gen";
import { authSignup, authSignin, authRefreshToken, authSignout, authGetCurrentUser, root, client } from "../sdk.gen";

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const authSignupQueryKey = (options: Options<AuthSignupData>) => [createQueryKey("authSignup", options)];

export const authSignupOptions = (options: Options<AuthSignupData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authSignup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authSignupQueryKey(options),
  });
};

export const authSignupMutation = (options?: Partial<Options<AuthSignupData>>) => {
  const mutationOptions: UseMutationOptions<AuthSignupResponse, AuthSignupError, Options<AuthSignupData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await authSignup({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authSigninQueryKey = (options: Options<AuthSigninData>) => [createQueryKey("authSignin", options)];

export const authSigninOptions = (options: Options<AuthSigninData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authSignin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authSigninQueryKey(options),
  });
};

export const authSigninMutation = (options?: Partial<Options<AuthSigninData>>) => {
  const mutationOptions: UseMutationOptions<AuthSigninResponse, AuthSigninError, Options<AuthSigninData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await authSignin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authRefreshTokenQueryKey = (options?: Options<AuthRefreshTokenData>) => [
  createQueryKey("authRefreshToken", options),
];

export const authRefreshTokenOptions = (options?: Options<AuthRefreshTokenData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authRefreshToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authRefreshTokenQueryKey(options),
  });
};

export const authRefreshTokenMutation = (options?: Partial<Options<AuthRefreshTokenData>>) => {
  const mutationOptions: UseMutationOptions<AuthRefreshTokenResponse, DefaultError, Options<AuthRefreshTokenData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await authRefreshToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authSignoutQueryKey = (options: Options<AuthSignoutData>) => [createQueryKey("authSignout", options)];

export const authSignoutOptions = (options: Options<AuthSignoutData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authSignout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authSignoutQueryKey(options),
  });
};

export const authSignoutMutation = (options?: Partial<Options<AuthSignoutData>>) => {
  const mutationOptions: UseMutationOptions<AuthSignoutResponse, AuthSignoutError, Options<AuthSignoutData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await authSignout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authGetCurrentUserQueryKey = (options?: Options<AuthGetCurrentUserData>) => [
  createQueryKey("authGetCurrentUser", options),
];

export const authGetCurrentUserOptions = (options?: Options<AuthGetCurrentUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authGetCurrentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authGetCurrentUserQueryKey(options),
  });
};

export const rootQueryKey = (options: Options<RootData>) => [createQueryKey("root", options)];

export const rootOptions = (options: Options<RootData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await root({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: rootQueryKey(options),
  });
};
